# coding: utf-8

"""
    Quay Frontend

    This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations. You can find out more at <a href=\"https://quay.io\">Quay</a>.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@quay.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UpdateMirrorConfigExternalRegistryConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'proxy': 'object',
        'verify_tls': 'bool'
    }

    attribute_map = {
        'proxy': 'proxy',
        'verify_tls': 'verify_tls'
    }

    def __init__(self, proxy=None, verify_tls=None):  # noqa: E501
        """UpdateMirrorConfigExternalRegistryConfig - a model defined in Swagger"""  # noqa: E501
        self._proxy = None
        self._verify_tls = None
        self.discriminator = None
        if proxy is not None:
            self.proxy = proxy
        if verify_tls is not None:
            self.verify_tls = verify_tls

    @property
    def proxy(self):
        """Gets the proxy of this UpdateMirrorConfigExternalRegistryConfig.  # noqa: E501

        Proxy configuration for use during synchronization.  # noqa: E501

        :return: The proxy of this UpdateMirrorConfigExternalRegistryConfig.  # noqa: E501
        :rtype: object
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this UpdateMirrorConfigExternalRegistryConfig.

        Proxy configuration for use during synchronization.  # noqa: E501

        :param proxy: The proxy of this UpdateMirrorConfigExternalRegistryConfig.  # noqa: E501
        :type: object
        """

        self._proxy = proxy

    @property
    def verify_tls(self):
        """Gets the verify_tls of this UpdateMirrorConfigExternalRegistryConfig.  # noqa: E501

        Determines whether HTTPs is required and the certificate is verified when communicating with the external repository.  # noqa: E501

        :return: The verify_tls of this UpdateMirrorConfigExternalRegistryConfig.  # noqa: E501
        :rtype: bool
        """
        return self._verify_tls

    @verify_tls.setter
    def verify_tls(self, verify_tls):
        """Sets the verify_tls of this UpdateMirrorConfigExternalRegistryConfig.

        Determines whether HTTPs is required and the certificate is verified when communicating with the external repository.  # noqa: E501

        :param verify_tls: The verify_tls of this UpdateMirrorConfigExternalRegistryConfig.  # noqa: E501
        :type: bool
        """

        self._verify_tls = verify_tls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateMirrorConfigExternalRegistryConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateMirrorConfigExternalRegistryConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
